import numpy as np
import itertools, math

def multi(a, b):
  return a, b

def transform():
  # w = np.array([(1,2), (2,4), (3,6), (4, 8), (5,10)])
  # w = np.array([(1,3), (2,6), (3,9), (4, 12), (5, 15)])
  # w = np.array([(1,4), (-2,-8), (3,12), (5, 20)])
  # w = np.array([[84, 238], [87, 270], [94, 300], [101, 330], [110, 358], [126, 383], [148, 404], [172, 420], [199, 426], [226, 420], [251, 405], [273, 385], [290, 360], [299, 332], [306, 301], [312, 270], [314, 239], [102, 221], [118, 209], [138, 207], [158, 211], [177, 220], [224, 219], [243, 211], [263, 207], [282, 210], [297, 221], [200, 245], [200, 266], [200, 287], [200, 308], [179, 321], [189, 325], [200, 328], [211, 325], [221, 321], [126, 246], [139, 238], [155, 239], [169, 252], [154, 254], [137, 254], [232, 252], [245, 239], [261, 238], [274, 246], [263, 254], [247, 254], [157, 360], [174, 354], [189, 350], [200, 353], [211, 350], [226, 354], [243, 360], [226, 372], [212, 378], [200, 379], [188, 378], [174, 372], [165, 361], [189, 362], [200, 363], [211, 362], [236, 361], [211, 361], [200, 362], [189, 361]])
  N = 8
  N0 = 1
  w = np.array([(i, i * 5) for i in range(N0, N)])
  v = np.array([(i * 7, -i) for i in range(N0, N)])
  # v = np.array([(0,1,3), (0,2,6), (0,3,9), (0, 5, 15)])
  # v = np.array([(2,-1), (4, -2), (6,-3), (8, -4), (10, -5)])
  # v = np.array([[162, 248], [164, 283], [167, 319], [174, 352], [190, 382], [218, 404], [251, 421], [282, 434], [311, 437], [337, 429], [356, 406], [374, 381], [389, 354], [397, 325], [401, 295], [401, 265], [399, 236], [197, 221], [217, 205], [242, 201], [267, 206], [291, 215], [323, 214], [342, 206], [362, 200], [381, 201], [393, 216], [309, 234], [311, 254], [314, 275], [316, 297], [285, 311], [298, 315], [313, 318], [325, 314], [335, 310], [227, 238], [241, 230], [258, 230], [272, 241], [257, 243], [240, 243], [331, 239], [343, 227], [358, 227], [370, 234], [360, 241], [345, 241], [250, 346], [275, 342], [298, 338], [311, 340], [324, 337], [341, 341], [358, 342], [342, 367], [326, 380], [311, 383], [296, 382], [274, 373], [257, 349], [297, 344], [311, 345], [324, 343], [351, 344], [325, 364], [311, 367], [297, 366]])

  # Rotated: [[154.40754132 389.42818488], [147.28924887 438.49273331], [141.2740917  489.22554207], [141.64941334 536.93150746], [155.34370282 583.02344206], [187.92686617 621.42054437], [228.85133116 654.30197021], [268.1346506  681.07547977], [307.47219958 693.42688619], [345.7608428  689.68792913], [378.5880391  663.18556728], [410.59466262 633.6292473 ], [439.00931773 600.45384414], [458.2892132  562.52910775], [472.30887994 522.08842347], [480.78575544 480.51748913], [486.2086728  439.76712757], [210.53615267 361.90403206], [242.77110916 345.38411741], [278.54380451 346.90538908], [311.7734372  360.89794105], [342.48712203 380.15072175], [387.1120145  387.80702447], [415.70077305 382.09012979], [445.11010438 379.42719325], [471.15580028 386.18157888], [483.54573626 410.35779625], [362.06099482 411.56510546], [359.18114011 439.84418672], [357.40442069 469.79152831], [353.95944095 500.84200519], [307.04693357 511.48233653], [323.93075505 520.69844049], [343.86853467 529.09397168], [361.62715847 526.94193063], [376.61438665 524.22476455], [247.30352422 393.93777035], [268.96379371 386.80806309], [292.52065651 391.61162587], [308.81223818 410.81017703], [287.46164598 409.3431349 ], [263.90478319 404.53957212], [391.13353408 424.70996988], [411.15265802 411.47234635], [431.93812519 415.71078409], [446.5885613  428.80141897], [430.75364558 435.67567848], [409.96817841 431.43724074], [248.65782209 550.09207185], [284.43051744 551.61334352], [317.43181717 552.56949015], [334.88076368 559.01419849], [353.74252278 558.53041777], [376.1691355  568.8767718 ], [399.44343578 575.06603239], [370.20820789 605.18747741], [344.36373019 618.68054869], [322.73057547 618.59920438], [302.22767082 612.97506882], [274.28538162 594.28741315], [257.51001922 556.2271029 ], [314.35074426 560.60111451], [333.4679511  565.94268755], [352.04714768 566.84460464], [389.17842607 575.8594904 ], [347.49903264 596.22682119], [327.25157574 596.4280394 ], [308.13436889 591.08646635]]
  # B = np.zeros((2, 2))
  # for wi, vi in itertools.izip(w, v):
  #   wi = np.reshape(np.transpose(wi), (2, 1))
  #   vi = np.reshape(vi, (1, 2))
  #   B += np.dot(wi, vi)

  # Preprocess by recentering
  orig_w = np.copy(w)
  center_w = np.sum(w, 0)*1./len(w)
  center_v = np.sum(v, 0)*1./len(v)
  # w -= center_w
  # v -= center_v

  # B = np.dot(w, np.transpose(v))
  B = np.dot(np.transpose(w), v)
  U, s, V = np.linalg.svd(B)
  m = np.shape(U)[0]
  n = np.shape(V)[1]
  S = np.zeros((m, n))
  S[:n, :n] = np.diag(s)
  # B = np.dot(U, np.dot(S, V))

  M = np.zeros((m, n))
  M[:n, :n] = np.diag(np.append(np.ones(n - 1), np.linalg.det(U) * np.linalg.det(V)))
  # M[:n, :n] = np.diag(np.insert(np.ones(n - 1), 0, np.linalg.det(U) * np.linalg.det(V)))
  # M = np.identity(2)
  # M = np.array([[-1, 0], [0, 1]])
  # M = np.array([[0, -1], [1, 0]])

  # R = np.dot(U, np.dot(M, np.transpose(V)))
  R = np.dot(U, np.dot(M, V))
  # R = np.dot(np.transpose(U), np.dot(M, V))
  # var = np.var(center_v) # np.var(np.sum(w, 0))
  # var = np.var(v)
  var = 1./len(v) * np.sum(np.linalg.norm((v - center_v), axis=1)**2)
  c = 1./var*np.trace(np.dot(S, M))
  t = np.transpose(np.transpose(center_w) - c * np.dot(R, np.transpose(center_v)))

  print "B: \n", B
  print "U: \n", U
  print "S: \n", S
  print "V: \n", V
  print "R: \n", R
  print "M: \n", M
  # print "v[0]: \n", v[0], w[0]
  # print np.dot(R, np.transpose(v[0]))
  print "Rotated: \n" #, np.dot(v, R)
  Y = np.transpose(np.dot(R, np.transpose(v)))
  print Y # * math.sqrt(2)
  # print np.dot(v, np.dot(R, S))
  # print np.linalg.det(S)
  # X = -10 * np.diag(np.diagonal(R))
  # print "X: \n", X
  # print np.transpose(np.dot(X, np.dot(R, np.transpose(v))))
  print w[0][0]/Y[0][0]
  # print Y[0][0]/w[0][0]
  print center_w
  print center_v
  print var
  print "c: ", c
  print t
  print ""
  print c * np.transpose(np.dot(R, np.transpose(v)))
  print ""
  print c * np.transpose(np.dot(R, np.transpose(v))) + t
  # print np.linalg.det(R)
  # print np.dot(U, np.dot(S, V))
  # print np.transpose(np.dot(B, np.transpose(v)))/170
  # print w
  # print v
  print np.var(v)

if __name__ == '__main__':
  # a, b = multi(1, 2)
  # print a, b
  # print multi(3, 4)
  # x = (5, 6)
  # print multi(x[0], x[1])
  transform()
